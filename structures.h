#pragma once
#include <cmath>
#include <vector>

using BitArray = std::vector<bool>;

struct IQ {
    double Re;
    double Im;

};

const std::vector<IQ> QPSK_TABLE = {
    {1 / sqrt(2), 1 / sqrt(2)},   // 00
    {-1 / sqrt(2), 1 / sqrt(2)},  // 01
    {-1 / sqrt(2), -1 / sqrt(2)}, // 10
    {1 / sqrt(2), -1 / sqrt(2)}   // 11
};

const std::vector<IQ> QAM16_TABLE = {
    {-3/sqrt(10), -3/sqrt(10)}, // 0000
    {-3/sqrt(10), -1/sqrt(10)}, // 0001
    {-1/sqrt(10), -3/sqrt(10)}, // 0010
    {-1/sqrt(10), -1/sqrt(10)}, // 0011
    {-3/sqrt(10),  3/sqrt(10)}, // 0100
    {-3/sqrt(10),  1/sqrt(10)}, // 0101
    {-1/sqrt(10),  3/sqrt(10)}, // 0110
    {-1/sqrt(10),  1/sqrt(10)}, // 0111
    { 3/sqrt(10), -3/sqrt(10)}, // 1000
    { 3/sqrt(10), -1/sqrt(10)}, // 1001
    { 1/sqrt(10), -3/sqrt(10)}, // 1010
    { 1/sqrt(10), -1/sqrt(10)}, // 1011
    { 3/sqrt(10),  3/sqrt(10)}, // 1100
    { 3/sqrt(10),  1/sqrt(10)}, // 1101
    { 1/sqrt(10),  3/sqrt(10)}, // 1110
    { 1/sqrt(10),  1/sqrt(10)}  // 1111
};

const double QAM64_NORMALIZATION = sqrt(42.0);

const std::vector<IQ> QAM64_TABLE = {
    // Первый октант (I+, Q+)
    { 1/QAM64_NORMALIZATION,  1/QAM64_NORMALIZATION}, // 000000
    { 1/QAM64_NORMALIZATION,  3/QAM64_NORMALIZATION}, // 000001
    { 3/QAM64_NORMALIZATION,  1/QAM64_NORMALIZATION}, // 000010
    { 3/QAM64_NORMALIZATION,  3/QAM64_NORMALIZATION}, // 000011
    { 1/QAM64_NORMALIZATION,  5/QAM64_NORMALIZATION}, // 000100
    { 1/QAM64_NORMALIZATION,  7/QAM64_NORMALIZATION}, // 000101
    { 3/QAM64_NORMALIZATION,  5/QAM64_NORMALIZATION}, // 000110
    { 3/QAM64_NORMALIZATION,  7/QAM64_NORMALIZATION}, // 000111
    
    { 5/QAM64_NORMALIZATION,  1/QAM64_NORMALIZATION}, // 001000
    { 5/QAM64_NORMALIZATION,  3/QAM64_NORMALIZATION}, // 001001
    { 7/QAM64_NORMALIZATION,  1/QAM64_NORMALIZATION}, // 001010
    { 7/QAM64_NORMALIZATION,  3/QAM64_NORMALIZATION}, // 001011
    { 5/QAM64_NORMALIZATION,  5/QAM64_NORMALIZATION}, // 001100
    { 5/QAM64_NORMALIZATION,  7/QAM64_NORMALIZATION}, // 001101
    { 7/QAM64_NORMALIZATION,  5/QAM64_NORMALIZATION}, // 001110
    { 7/QAM64_NORMALIZATION,  7/QAM64_NORMALIZATION}, // 001111

    // Остальные октанты (полная симметрия)
    { 1/QAM64_NORMALIZATION, -1/QAM64_NORMALIZATION}, // 010000
    { 1/QAM64_NORMALIZATION, -3/QAM64_NORMALIZATION}, // 010001
    { 3/QAM64_NORMALIZATION, -1/QAM64_NORMALIZATION}, // 010010
    { 3/QAM64_NORMALIZATION, -3/QAM64_NORMALIZATION}, // 010011
    { 1/QAM64_NORMALIZATION, -5/QAM64_NORMALIZATION}, // 010100
    { 1/QAM64_NORMALIZATION, -7/QAM64_NORMALIZATION}, // 010101
    { 3/QAM64_NORMALIZATION, -5/QAM64_NORMALIZATION}, // 010110
    { 3/QAM64_NORMALIZATION, -7/QAM64_NORMALIZATION}, // 010111
    
    { 5/QAM64_NORMALIZATION, -1/QAM64_NORMALIZATION}, // 011000
    { 5/QAM64_NORMALIZATION, -3/QAM64_NORMALIZATION}, // 011001
    { 7/QAM64_NORMALIZATION, -1/QAM64_NORMALIZATION}, // 011010
    { 7/QAM64_NORMALIZATION, -3/QAM64_NORMALIZATION}, // 011011
    { 5/QAM64_NORMALIZATION, -5/QAM64_NORMALIZATION}, // 011100
    { 5/QAM64_NORMALIZATION, -7/QAM64_NORMALIZATION}, // 011101
    { 7/QAM64_NORMALIZATION, -5/QAM64_NORMALIZATION}, // 011110
    { 7/QAM64_NORMALIZATION, -7/QAM64_NORMALIZATION}, // 011111

    {-1/QAM64_NORMALIZATION,  1/QAM64_NORMALIZATION}, // 100000
    {-1/QAM64_NORMALIZATION,  3/QAM64_NORMALIZATION}, // 100001
    {-3/QAM64_NORMALIZATION,  1/QAM64_NORMALIZATION}, // 100010
    {-3/QAM64_NORMALIZATION,  3/QAM64_NORMALIZATION}, // 100011
    {-1/QAM64_NORMALIZATION,  5/QAM64_NORMALIZATION}, // 100100
    {-1/QAM64_NORMALIZATION,  7/QAM64_NORMALIZATION}, // 100101
    {-3/QAM64_NORMALIZATION,  5/QAM64_NORMALIZATION}, // 100110
    {-3/QAM64_NORMALIZATION,  7/QAM64_NORMALIZATION}, // 100111
    
    {-5/QAM64_NORMALIZATION,  1/QAM64_NORMALIZATION}, // 101000
    {-5/QAM64_NORMALIZATION,  3/QAM64_NORMALIZATION}, // 101001
    {-7/QAM64_NORMALIZATION,  1/QAM64_NORMALIZATION}, // 101010
    {-7/QAM64_NORMALIZATION,  3/QAM64_NORMALIZATION}, // 101011
    {-5/QAM64_NORMALIZATION,  5/QAM64_NORMALIZATION}, // 101100
    {-5/QAM64_NORMALIZATION,  7/QAM64_NORMALIZATION}, // 101101
    {-7/QAM64_NORMALIZATION,  5/QAM64_NORMALIZATION}, // 101110
    {-7/QAM64_NORMALIZATION,  7/QAM64_NORMALIZATION}, // 101111

    {-1/QAM64_NORMALIZATION, -1/QAM64_NORMALIZATION}, // 110000
    {-1/QAM64_NORMALIZATION, -3/QAM64_NORMALIZATION}, // 110001
    {-3/QAM64_NORMALIZATION, -1/QAM64_NORMALIZATION}, // 110010
    {-3/QAM64_NORMALIZATION, -3/QAM64_NORMALIZATION}, // 110011
    {-1/QAM64_NORMALIZATION, -5/QAM64_NORMALIZATION}, // 110100
    {-1/QAM64_NORMALIZATION, -7/QAM64_NORMALIZATION}, // 110101
    {-3/QAM64_NORMALIZATION, -5/QAM64_NORMALIZATION}, // 110110
    {-3/QAM64_NORMALIZATION, -7/QAM64_NORMALIZATION}, // 110111
    
    {-5/QAM64_NORMALIZATION, -1/QAM64_NORMALIZATION}, // 111000
    {-5/QAM64_NORMALIZATION, -3/QAM64_NORMALIZATION}, // 111001
    {-7/QAM64_NORMALIZATION, -1/QAM64_NORMALIZATION}, // 111010
    {-7/QAM64_NORMALIZATION, -3/QAM64_NORMALIZATION}, // 111011
    {-5/QAM64_NORMALIZATION, -5/QAM64_NORMALIZATION}, // 111100
    {-5/QAM64_NORMALIZATION, -7/QAM64_NORMALIZATION}, // 111101
    {-7/QAM64_NORMALIZATION, -5/QAM64_NORMALIZATION}, // 111110
    {-7/QAM64_NORMALIZATION, -7/QAM64_NORMALIZATION}  // 111111
};